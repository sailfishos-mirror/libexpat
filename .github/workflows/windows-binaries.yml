#                          __  __            _
#                       ___\ \/ /_ __   __ _| |_
#                      / _ \\  /| '_ \ / _` | __|
#                     |  __//  \| |_) | (_| | |_
#                      \___/_/\_\ .__/ \__,_|\__|
#                               |_| XML parser
#
# Copyright (c) 2025 Sebastian Pipping <sebastian@pipping.org>
# Licensed under the MIT license:
#
# Permission is  hereby granted,  free of charge,  to any  person obtaining
# a  copy  of  this  software   and  associated  documentation  files  (the
# "Software"),  to  deal in  the  Software  without restriction,  including
# without  limitation the  rights  to use,  copy,  modify, merge,  publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit
# persons  to whom  the Software  is  furnished to  do so,  subject to  the
# following conditions:
#
# The above copyright  notice and this permission notice  shall be included
# in all copies or substantial portions of the Software.
#
# THE  SOFTWARE  IS  PROVIDED  "AS  IS",  WITHOUT  WARRANTY  OF  ANY  KIND,
# EXPRESS  OR IMPLIED,  INCLUDING  BUT  NOT LIMITED  TO  THE WARRANTIES  OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
# NO EVENT SHALL THE AUTHORS OR  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR  OTHER LIABILITY, WHETHER  IN AN  ACTION OF CONTRACT,  TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
# USE OR OTHER DEALINGS IN THE SOFTWARE.

name: Build Windows binaries

on:
  pull_request:
  push:
  schedule:
    - cron: '0 2 * * 5'  # Every Friday at 2am
  workflow_dispatch:

permissions:
  contents: read

jobs:
  windows_binaries:
    name: Build ${{ matrix.expat_platform }} binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: windows-2019
            cmake_build_type: Debug
            cmake_generator: Visual Studio 16 2019
            cmake_platform: Win32
            expat_char_type: char
            expat_dll: libexpatd.dll
            expat_platform: win32
          - runs-on: windows-2019
            cmake_build_type: Debug
            cmake_generator: Visual Studio 16 2019
            cmake_platform: x64
            expat_char_type: wchar_t
            expat_dll: libexpatwd.dll
            expat_platform: win64
    defaults:
      run:
        shell: bash
    runs-on: "${{ matrix.runs-on }}"
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

    - uses: microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce  # v2

    - name: Install Inno Setup
      shell: pwsh
      run: |-
        Invoke-WebRequest -Uri https://files.jrsoftware.org/is/6/innosetup-6.1.2.exe -OutFile D:\\is.exe
        Start-Process -FilePath D:\\is.exe -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait

    - name: 'Add Inno Setup compiler to ${PATH}'
      run: |-
        echo 'C:\Program Files (x86)\Inno Setup 6' >> "${GITHUB_PATH}"

    - name: Install Innoextract
      env:
        version: 1.9
      run: |-
        set -x
        mkdir innoextract
        cd innoextract
        export PATH="${PATH}:/c/msys64/usr/bin"  # for wget
        wget -q https://github.com/dscharrer/innoextract/releases/download/${version}/innoextract-${version}-windows.zip
        unzip innoextract-${version}-windows.zip
        echo "${GITHUB_WORKSPACE}\innoextract" >> "${GITHUB_PATH}"

    - name: Prepare win64 installer
      if: "${{ matrix.expat_platform == 'win64' }}"
      run: |-
        bat_sed_args=(
          -e 's,-A Win32,-A x64,g'
          -e 's,win32,win64,g'
        )
        inno_sed_args=(
          -e 's,^OutputDir=win32,OutputDir=win64,'
          -e 's,win32bin,win64bin,'
          -e 's,win32\\bin,win64\\bin,g'
        )
        set -x
        cd expat
        mkdir win64

        sed "${bat_sed_args[@]}" win32/build_expat_iss.bat > win64/build_expat_iss.bat
        ! grep -i win32 win64/build_expat_iss.bat  # i.e. assert success

        sed "${inno_sed_args[@]}" win32/expat.iss > win64/expat.iss
        ! grep 'win32\\bin' win64/expat.iss  # i.e. assert success
        grep win32 win64/expat.iss  # purely informational
    
    - name: Build installer
      env:
        expat_platform: ${{ matrix.expat_platform }}
      run: |-
        set -x
        cd expat

        cmd < "${expat_platform}"/build_expat_iss.bat

        ls -lh "${expat_platform}"/*.exe
        cp -v "${expat_platform}"/expat-*bin-*.*.*.exe /d/expat-installer.exe

    - name: Create .zip file from installer content
      env:
        expat_platform: ${{ matrix.expat_platform }}
      run: |-
        export PATH="${PATH}:/c/msys64/usr/bin"  # for zip
        set -x

        cd "expat/${expat_platform}"
        zip_name="$(echo expat-*bin-*.exe | sed 's,\.exe$,.zip,')"

        # Workaround issues with innoextract 1.9 as documented at
        # https://github.com/dscharrer/innoextract/issues/178#issue-2505033557
        innoextract -l expat-*bin-*.exe \
            | awk -F'"' '{print $2}' \
            | xargs dirname \
            | sort -u \
            | xargs mkdir -v -p

        innoextract -e expat-*bin-*.exe

        ls -lh app/Bin/

        ( cd app && zip -9 -r ../"${zip_name}" . )

    - name: Offer binaries for download
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1  # v4.6.1
      with:
        name: expat_${{ matrix.expat_platform }}_${{ github.sha }}
        path: expat/${{ matrix.expat_platform }}/expat-win*bin-*.*.*.*
        if-no-files-found: error

    - name: Run installer
      shell: pwsh
      run: |-
        Start-Process -FilePath D:\\expat-installer.exe -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait

    - name: Build installed code — Configure
      env:
        cmake_build_type: ${{ matrix.cmake_build_type }}
        cmake_generator: ${{ matrix.cmake_generator }}
        cmake_platform: ${{ matrix.cmake_platform }}
        expat_char_type: ${{ matrix.expat_char_type }}
      run: |-
        cmake_args=(
          -A "${cmake_platform}"
          -G "${cmake_generator}"
          -DCMAKE_BUILD_TYPE="${cmake_build_type}"
          -DEXPAT_CHAR_TYPE="${expat_char_type}"
          -DEXPAT_WARNINGS_AS_ERRORS=ON
          -Wdev
          -Wdeprecated
        )
        set -x
        cd '/c/Program Files (x86)/Expat '*/Source
        mkdir build
        cmake -S . -B build "${cmake_args[@]}"

    - name: Build installed code — Build
      env:
        cmake_build_type: ${{ matrix.cmake_build_type }}
      run: |-
        msbuild_args=(
          -m
          -property:Configuration="${cmake_build_type}"
        )
        set -x
        cd '/c/Program Files (x86)/Expat '*/Source/build
        MSBuild.exe "${msbuild_args[@]}" expat.sln

    - name: Build installed code — Run tests
      env:
        cmake_build_type: ${{ matrix.cmake_build_type }}
        expat_dll: ${{ matrix.expat_dll }}
      run: |-
        ctest_args=(
          --build-config "${cmake_build_type}"
          --output-on-failure
          --parallel 2
        )
        set -x
        cd '/c/Program Files (x86)/Expat '*/Source/build
        cp -v "${cmake_build_type}/${expat_dll}" "tests/${cmake_build_type}/"
        ctest "${ctest_args[@]}"
